FRAMEWORK = "VPKit.framework"
FRAMEWORK_PLIST = "VPKit.framework/Info.plist"
SWIFT_PROJECT =  "VPKitDemoSwift/VPKitDemoSwift.xcodeproj"
OBJC_PROJECT = "VPKitDemoObjC/VPKitDemo.xcodeproj"
DEMO_PROJECTS = [SWIFT_PROJECT,OBJC_PROJECT]

def framework_version()
	path = "#{FRAMEWORK_PLIST}"
	sh("plutil -convert xml1 ../#{path}")
	version =  get_info_plist_value(
			path: path,
			key: 'CFBundleShortVersionString'
			)
	sh("plutil -convert binary1 ../#{path}")
	puts ("version: #{version}")
	version
end


private_lane :prepare do  |options|
    ensure_git_status_clean
    if (options[:branch])
        ensure_git_branch(branch: options[:branch])
    end
    clear_derived_data
end

lane :sync_project_version_numbers do
    version = framework_version()
    DEMO_PROJECTS.each do |project|
        increment_version_number(xcodeproj:project,version_number:version)
    end
end

lane :test_projects do
    xcbuild(project:OBJC_PROJECT,scheme: "VPKitDemo")
    xcbuild(project:SWIFT_PROJECT,scheme: "VPKitDemoSwift")
end


lane :test do
    x=1/0
end

lane :pre_publish do
    prepare(branch: "develop")
end

lane :post_publish do
    sync_project_version_numbers	
    test_projects
    version = framework_version()
    git_commit(path:".", message: "VPKit publish v #{version}")
    add_git_tag(tag:"#{version}")
    push_to_git_remote
end


lane :publish do
    pre_publish
    post_publish
end



error do |lane, exception|
    notification(message:"Lane #{lane} failed to complete.")
end
